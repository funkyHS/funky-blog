(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{398:function(t,a,s){"use strict";s.r(a);var n=s(45),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#_1-nginx配置实例-反向代理实例1"}},[t._v("1. Nginx配置实例-反向代理实例1")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-1-过程分析"}},[t._v("1.1 过程分析")])]),s("li",[s("a",{attrs:{href:"#_1-2-配置域名映射"}},[t._v("1.2 配置域名映射")])]),s("li",[s("a",{attrs:{href:"#_1-3-修改mac上nginx的配置文件"}},[t._v("1.3 修改mac上nginx的配置文件")])])])]),s("li",[s("a",{attrs:{href:"#_2-nginx配置实例-反向代理实例2"}},[t._v("2. Nginx配置实例-反向代理实例2")]),s("ul",[s("li",[s("a",{attrs:{href:"#_2-1-修改配置文件"}},[t._v("2.1 修改配置文件")])]),s("li",[s("a",{attrs:{href:"#_2-2-location-指令说明"}},[t._v("2.2 location 指令说明")])])])]),s("li",[s("a",{attrs:{href:"#_3-nginx配置实例-负载均衡"}},[t._v("3. Nginx配置实例-负载均衡")]),s("ul",[s("li",[s("a",{attrs:{href:"#_3-1-修改配置文件"}},[t._v("3.1 修改配置文件")])]),s("li",[s("a",{attrs:{href:"#_3-2-负载均衡分配策略"}},[t._v("3.2 负载均衡分配策略")])])])]),s("li",[s("a",{attrs:{href:"#_4-nginx配置实例-动静分离"}},[t._v("4. Nginx配置实例-动静分离")]),s("ul",[s("li",[s("a",{attrs:{href:"#_4-1-准备工作"}},[t._v("4.1 准备工作")])]),s("li",[s("a",{attrs:{href:"#_4-2-修改nginx配置"}},[t._v("4.2 修改nginx配置")])])])]),s("li",[s("a",{attrs:{href:"#_5-nginx配置实例-高可用"}},[t._v("5. Nginx配置实例-高可用")]),s("ul",[s("li",[s("a",{attrs:{href:"#_5-1-准备工作"}},[t._v("5.1 准备工作")])]),s("li",[s("a",{attrs:{href:"#_5-2-keepalived"}},[t._v("5.2 keepalived")])])])]),s("li",[s("a",{attrs:{href:"#_6-nginx配置实例-虚拟主机"}},[t._v("6. Nginx配置实例-虚拟主机")]),s("ul",[s("li",[s("a",{attrs:{href:"#添加配置"}},[t._v("添加配置")])])])]),s("li",[s("a",{attrs:{href:"#_7-nginx的原理解析"}},[t._v("7. Nginx的原理解析")]),s("ul",[s("li",[s("a",{attrs:{href:"#_7-1-mater-和-worker"}},[t._v("7.1 mater 和 worker")])]),s("li",[s("a",{attrs:{href:"#_7-2-一个master多个workers-的机制好处"}},[t._v("7.2 一个master多个workers 的机制好处")])]),s("li",[s("a",{attrs:{href:"#_7-3-需要设置多少个-worker"}},[t._v("7.3 需要设置多少个 worker")])]),s("li",[s("a",{attrs:{href:"#_7-4-连接数-worker-connection"}},[t._v("7.4 连接数 worker_connection")])])])]),s("li",[s("a",{attrs:{href:"#参考"}},[t._v("参考")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"_1-nginx配置实例-反向代理实例1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-nginx配置实例-反向代理实例1"}},[t._v("#")]),t._v(" 1. Nginx配置实例-反向代理实例1")]),t._v(" "),s("ul",[s("li",[t._v("实现效果：打开浏览器，在浏览器地址栏输入地址 "),s("code",[t._v("www.123.com")]),t._v("，通过nginx反向代理，最后跳转到本地 "),s("code",[t._v("http://127.0.0.1:80/")])]),t._v(" "),s("li",[t._v("Mac自带Apache服务器，启动后，在浏览器中访问"),s("a",{attrs:{href:"http://127.0.0.1:80/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://127.0.0.1/:80"),s("OutboundLink")],1),t._v("，显示It works")]),t._v(" "),s("li",[t._v("开启apache:  "),s("code",[t._v("sudo apachectl start")])]),t._v(" "),s("li",[t._v("重启apache:  "),s("code",[t._v("sudo apachectl restart")])]),t._v(" "),s("li",[t._v("关闭apache:  "),s("code",[t._v("sudo apachectl stop")])]),t._v(" "),s("li",[t._v("Apache服务器默认的web根目录在："),s("code",[t._v("/Library/WebServer/Documents")])]),t._v(" "),s("li",[t._v("Apache的配置文件在："),s("code",[t._v("/etc/apache2")])])]),t._v(" "),s("h3",{attrs:{id:"_1-1-过程分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-过程分析"}},[t._v("#")]),t._v(" 1.1 过程分析")]),t._v(" "),s("ul",[s("li",[t._v("浏览器输入"),s("code",[t._v("www.123.com")]),t._v("，浏览器先到"),s("code",[t._v("/etc/hosts")]),t._v("文件中看有没有相应的配置，如果有对应的配置，那么直接根据配置的映射ip去访问，如果没有对应的域名映射，在进行dns解析")])]),t._v(" "),s("h3",{attrs:{id:"_1-2-配置域名映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-配置域名映射"}},[t._v("#")]),t._v(" 1.2 配置域名映射")]),t._v(" "),s("ul",[s("li",[t._v("在"),s("code",[t._v("/etc/hosts")]),t._v("中配置域名的映射")]),t._v(" "),s("li",[t._v("使用命令："),s("code",[t._v("$ sudo vi /etc/hosts")])]),t._v(" "),s("li",[t._v("然后在hosts中添加"),s("code",[t._v("127.0.0.1 www.123.com")])]),t._v(" "),s("li",[t._v("此时在浏览器中输入："),s("code",[t._v("http://www.123.com:8181/")]),t._v("，此时就可以访问到nginx的html页面")])]),t._v(" "),s("h3",{attrs:{id:"_1-3-修改mac上nginx的配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-修改mac上nginx的配置文件"}},[t._v("#")]),t._v(" 1.3 修改mac上nginx的配置文件")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("/usr/local/etc/nginx/nginx.conf")]),t._v("，保存并且重新启动nginx")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("http "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当我们访问 127.0.0.1:8181/ 那么nginx就会转发到 proxy_pass对应的地址中")]),t._v("\n        listen       "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8181")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        server_name  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        location / "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            proxy_pass http://127.0.0.1:80/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            index  index.html index.htm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("br"),s("img",{attrs:{src:"http://funky_hs.gitee.io/imgcloud/funkyblog/nginx/6.png",width:"400"}})]),t._v(" "),s("h2",{attrs:{id:"_2-nginx配置实例-反向代理实例2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-nginx配置实例-反向代理实例2"}},[t._v("#")]),t._v(" 2. Nginx配置实例-反向代理实例2")]),t._v(" "),s("ul",[s("li",[t._v("实现效果：使用Nginx反向代理，根据访问的路径跳转到不同端口的服务中\n"),s("ul",[s("li",[t._v("访问 "),s("code",[t._v("http://127.0.0.1:9001/edu/a.html")]),t._v("，转发到"),s("code",[t._v("127.0.0.1:8080/edu/a.html")])]),t._v(" "),s("li",[t._v("访问 "),s("code",[t._v("http://127.0.0.1:9001/vod/a.html")]),t._v("，转发到"),s("code",[t._v("127.0.0.1:8081/vod/a.html")])])])])]),t._v(" "),s("h3",{attrs:{id:"_2-1-修改配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-修改配置文件"}},[t._v("#")]),t._v(" 2.1 修改配置文件")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen       "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9001")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name  localhost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  ~ /edu/  这个是对应的正则表达式")]),t._v("\n    location ~ /edu/ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        proxy_pass   http://127.0.0.1:8080"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    location ~ /vod/ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        proxy_pass   http://127.0.0.1:8081"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-2-location-指令说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-location-指令说明"}},[t._v("#")]),t._v(" 2.2 location 指令说明")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://nginx.org/en/docs/http/ngx_http_core_module.html#location",target:"_blank",rel:"noopener noreferrer"}},[t._v("location文档"),s("OutboundLink")],1)])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("location "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ~ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ~* "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ^~ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" uri "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[s("code",[t._v("=")]),t._v(" ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。")]),t._v(" "),s("li",[s("code",[t._v("~")]),t._v("：用于表示 uri 包含正则表达式，并且区分大小写。")]),t._v(" "),s("li",[s("code",[t._v("~*")]),t._v("：用于表示 uri 包含正则表达式，并且不区分大小写。")]),t._v(" "),s("li",[s("code",[t._v("^~")]),t._v("：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location块中的正则 uri 和请求字符串做匹配。")])]),t._v(" "),s("h2",{attrs:{id:"_3-nginx配置实例-负载均衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-nginx配置实例-负载均衡"}},[t._v("#")]),t._v(" 3. Nginx配置实例-负载均衡")]),t._v(" "),s("ul",[s("li",[t._v("实现效果：浏览器地址栏输入地址"),s("code",[t._v("http://127.0.0.1:80/edu/a.html")]),t._v("，负载均衡效果，平均转发到 8081和 8082 端口中。")])]),t._v(" "),s("h3",{attrs:{id:"_3-1-修改配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-修改配置文件"}},[t._v("#")]),t._v(" 3.1 修改配置文件")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 负载用到的配置")]),t._v("\nupstream myserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tserver "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:8080"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tserver "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:8081"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nserver "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen       "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name  localhost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    location / "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# myserver要与上面upstream中名称一样")]),t._v("\n\t    proxy_pass  http://myserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        root   html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        index  index.html index.htm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("在浏览器中访问"),s("code",[t._v("http://127.0.0.1:80/edu/a.html")]),t._v("，不断刷新，可以看到成功转发到不同的端口中了")])]),t._v(" "),s("h3",{attrs:{id:"_3-2-负载均衡分配策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-负载均衡分配策略"}},[t._v("#")]),t._v(" 3.2 负载均衡分配策略")]),t._v(" "),s("ul",[s("li",[t._v("负载均衡（load balance）即是将负载分摊到不同的服务单元，既保证服务的可用性，又保证响应足够快，给用户很好的体验。")]),t._v(" "),s("li",[t._v("快速增长的访问量和数据流量催生了各式各样的负载均衡产品，很多专业的负载均衡硬件提供了很好的功能，但却价格不菲，这使得负载均衡软件大受欢迎，nginx 就是其中的一个，在 linux 下有 Nginx、 LVS、 Haproxy 等等服务可以提供负载均衡服务，而且 Nginx 提供了几种分配方式(策略)")])]),t._v(" "),s("h4",{attrs:{id:"_1-轮询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-轮询"}},[t._v("#")]),t._v(" 1）轮询")]),t._v(" "),s("ul",[s("li",[t._v("这是Ngnix负载均衡默认分配策略。每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。")])]),t._v(" "),s("h4",{attrs:{id:"_2-权重weight"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-权重weight"}},[t._v("#")]),t._v(" 2）权重weight")]),t._v(" "),s("ul",[s("li",[t._v("weight 代表权重，默认为 1，权重越高被分配的客户端越多。指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("upstream myserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tserver "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:8080 "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("weight")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tserver "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:8081 "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("weight")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_3-ip-hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-ip-hash"}},[t._v("#")]),t._v(" 3）ip_hash")]),t._v(" "),s("ul",[s("li",[t._v("每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("upstream myserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tip_hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tserver "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:8080"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tserver "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:8081"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_4-fair-第三方"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-fair-第三方"}},[t._v("#")]),t._v(" 4） fair(第三方)")]),t._v(" "),s("ul",[s("li",[t._v("Ngnix负载均衡第三方分配策略。按后端服务器的响应时间来分配请求，响应时间短的优先分配。")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("upstream myserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tserver "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:8081"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tserver "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:8082"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tfair"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"_4-nginx配置实例-动静分离"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-nginx配置实例-动静分离"}},[t._v("#")]),t._v(" 4. Nginx配置实例-动静分离")]),t._v(" "),s("ul",[s("li",[t._v("Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Nginx 处理静态页面， Tomcat 处理动态页面。动静分离从目前实现角度来讲大致分为两种：\n"),s("ul",[s("li",[t._v("一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；")]),t._v(" "),s("li",[t._v("另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。")])])]),t._v(" "),s("li",[t._v("通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 Expires 来缓存）")]),t._v(" "),s("li",[t._v("若将其设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码304，如果有修改，则直接从服务器重新下载，返回状态码 200。")])]),t._v(" "),s("h3",{attrs:{id:"_4-1-准备工作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-准备工作"}},[t._v("#")]),t._v(" 4.1 准备工作")]),t._v(" "),s("ul",[s("li",[t._v("在根目录下创建 "),s("code",[t._v("/data")]),t._v("，然后新建文件"),s("code",[t._v("/data/www/a.html")]),t._v("，"),s("code",[t._v("/data/image/01.png")])])]),t._v(" "),s("h3",{attrs:{id:"_4-2-修改nginx配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-修改nginx配置"}},[t._v("#")]),t._v(" 4.2 修改nginx配置")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen       "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name  localhost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 主要配置内容")]),t._v("\n\tlocation /www/ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\troot  /data/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        index  index.html index.htm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    location /image/ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        root  /data/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        autoindex on"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 访问http://127.0.0.1/image/ 可以列出当前文件夹中的文件")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("在浏览器中输入地址："),s("code",[t._v("http://127.0.0.1/image/")]),t._v(" 可以列出当前文件夹中的文件")]),t._v(" "),s("li",[t._v("在浏览器中输入地址："),s("code",[t._v("http://127.0.0.1/image/01.png")]),t._v(" 访问静态资源")]),t._v(" "),s("li",[t._v("在浏览器中输入地址："),s("code",[t._v("http://127.0.0.1/www/a.html")]),t._v(" 访问静态资源")])]),t._v(" "),s("h2",{attrs:{id:"_5-nginx配置实例-高可用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-nginx配置实例-高可用"}},[t._v("#")]),t._v(" 5. Nginx配置实例-高可用")]),t._v(" "),s("ul",[s("li",[t._v("为什么要配置nginx高可用？以防单一nginx挂了，另一个nginx能担当重任\n"),s("br"),s("img",{attrs:{src:"http://funky_hs.gitee.io/imgcloud/funkyblog/nginx/7.png",width:"600"}})]),t._v(" "),s("li",[t._v("需要两台 nginx 服务器，需要 keepalived，需要虚拟ip(对外部可访问)")])]),t._v(" "),s("h3",{attrs:{id:"_5-1-准备工作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-准备工作"}},[t._v("#")]),t._v(" 5.1 准备工作")]),t._v(" "),s("ul",[s("li",[t._v("需要两台服务器 192.168.17.129 和 192.168.17.131")]),t._v(" "),s("li",[t._v("在两台服务器安装 Nginx")]),t._v(" "),s("li",[t._v("在两台服务器安装 keepalived")])]),t._v(" "),s("h3",{attrs:{id:"_5-2-keepalived"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-keepalived"}},[t._v("#")]),t._v(" 5.2 keepalived")]),t._v(" "),s("ul",[s("li",[t._v("在CenterOS中 使用 yum 命令进行安装yum install keepalived –y")]),t._v(" "),s("li",[t._v("安装之后，生成目录"),s("code",[t._v("/etc/keepalived")]),t._v("，配置文件：keepalived.conf")]),t._v(" "),s("li",[t._v("修改/etc/keepalived/keepalivec.conf配置文件")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("global_defs "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 全局配置")]),t._v("\n\tnotification_email "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tacassen@firewall.loc\n\t\tfailover@firewall.loc\n\t\tsysadmin@firewall.loc\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tnotification_email_from Alexandre.Cassen@firewall.loc\n\tsmtp_server "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".17.129\n\tsmtp_connect_timeout "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n\trouter_id LVS_DEVEL "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在/etc/hosts中添加的名字：127.0.0.1 LVS_DEVEL    访问到主机")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nvrrp_script chk_http_port "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检测脚本配置")]),t._v("\n\tscript "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/usr/local/src/nginx_check.sh"')]),t._v(" \n\tinterval "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#（检测脚本执行的间隔）每隔2s执行一次脚本")]),t._v("\n\tweight -20 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果脚本中的条件成立，那么就给当前服务器的权重降低20 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nvrrp_instance VI_1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tstate BACKUP "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 备份服务器上将 MASTER 改为 BACKUP")]),t._v("\n\tinterface ens33 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 网卡  在命令行使用 ifconfig，可以看到网卡的名称")]),t._v("\n\tvirtual_router_id "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("51")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 主、备机的 virtual_router_id 必须相同")]),t._v("\n\tpriority "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("90")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 主、备机取不同的优先级，主机值较大，备份机值较小")]),t._v("\n\tadvert_int "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每隔1秒发送一个心跳，判断服务器是否还或者")]),t._v("\n\tauthentication "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 权限校验")]),t._v("\n\t\tauth_type PASS "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 密码是 1111")]),t._v("\n\t\tauth_pass "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1111")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tvirtual_ipaddress "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".17.50 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# VRRP H 虚拟地址")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("在"),s("code",[t._v("/usr/local/src")]),t._v("目录下添加检测脚本"),s("code",[t._v("nginx_check.sh")])])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/bin/bash")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -C nginx – no-header "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wc")]),t._v(" -l"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$A")]),t._v(" -eq "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n\t/usr/local/nginx/sbin/nginx  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# nginx启动路径")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -C nginx --no-header "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("wc")]),t._v(" -l"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" -eq "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("killall")]),t._v(" keepalived\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n")])])]),s("ul",[s("li",[t._v("把两台服务器上 Nginx 和 keepalived 启动\n"),s("ul",[s("li",[t._v("启动 Nginx： ./nginx")]),t._v(" "),s("li",[t._v("启动 keepalived： systemctl start keepalived.service")])])]),t._v(" "),s("li",[t._v("测试：\n"),s("ul",[s("li",[t._v("在浏览器地址栏输入 虚拟 ip 地址 192.168.17.50")]),t._v(" "),s("li",[t._v("把主服务器（192.168.17.129） Nginx 和 keepalived 停止，再输入 192.168.17.50")])])])]),t._v(" "),s("h2",{attrs:{id:"_6-nginx配置实例-虚拟主机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-nginx配置实例-虚拟主机"}},[t._v("#")]),t._v(" 6. Nginx配置实例-虚拟主机")]),t._v(" "),s("ul",[s("li",[t._v("有的网站，由于访问量太小，需要节省成本，将多个网站部署在同一台服务器上。")]),t._v(" "),s("li",[t._v("例如将"),s("code",[t._v("www.aaa.com")]),t._v("和"),s("code",[t._v("www.bbb.com")]),t._v("两个网站部署在同一台服务器上，两个域名解析到同一个IP地址，但是用户通过两个域名却可以打开两个完全不同的网站，互相不影响，就像访问两个服务器一样，所以叫两个虚拟主机。")])]),t._v(" "),s("h3",{attrs:{id:"添加配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加配置"}},[t._v("#")]),t._v(" 添加配置")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(" default_server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name _"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("444")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 过滤其他域名的请求，返回444状态码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nserver "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name www.aaa.com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# www.aaa.com域名")]),t._v("\n    location / "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        proxy_pass http://localhost:8080"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对应端口号8080")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nserver "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name www.bbb.com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# www.bbb.com域名")]),t._v("\n    location / "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        proxy_pass http://localhost:8081"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对应端口号8081")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"_7-nginx的原理解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-nginx的原理解析"}},[t._v("#")]),t._v(" 7. Nginx的原理解析")]),t._v(" "),s("h3",{attrs:{id:"_7-1-mater-和-worker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-mater-和-worker"}},[t._v("#")]),t._v(" 7.1 mater 和 worker")]),t._v(" "),s("p",[s("br"),s("img",{attrs:{src:"http://funky_hs.gitee.io/imgcloud/funkyblog/nginx/8.png",width:"600"}}),t._v(" "),s("br"),s("img",{attrs:{src:"http://funky_hs.gitee.io/imgcloud/funkyblog/nginx/9.png",width:"600"}}),t._v(" "),s("br"),s("img",{attrs:{src:"http://funky_hs.gitee.io/imgcloud/funkyblog/nginx/10.png",width:"600"}})]),t._v(" "),s("ul",[s("li",[t._v("流程说明：\n"),s("ul",[s("li",[t._v("发送请求，先到Nginx中的Master，Master相当于一个管理员，管理员得到任务之后，把任务给下面的Worker")]),t._v(" "),s("li",[t._v("Worker通过争抢机制，得到任务，然后可以进行反向代理，用tomcat完成请求的具体操作")])])])]),t._v(" "),s("h3",{attrs:{id:"_7-2-一个master多个workers-的机制好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-一个master多个workers-的机制好处"}},[t._v("#")]),t._v(" 7.2 一个master多个workers 的机制好处")]),t._v(" "),s("ul",[s("li",[t._v("可以使用 "),s("code",[t._v("nginx -s reload")]),t._v(" 热部署，线上的nginx是不能结束的，使用reload重新加载其他的Work，不影响正在运行的Work")]),t._v(" "),s("li",[t._v("对于每个 worker 进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多")]),t._v(" "),s("li",[t._v("采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断， master 进程则很快启动新的worker进程。")]),t._v(" "),s("li",[t._v("worker 进程的异常退出，肯定是程序有 bug 了，异常退出，会导致当前 worker 上的所有请求失败，不过不会影响到所有请求，所以降低了风险")])]),t._v(" "),s("h3",{attrs:{id:"_7-3-需要设置多少个-worker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-需要设置多少个-worker"}},[t._v("#")]),t._v(" 7.3 需要设置多少个 worker")]),t._v(" "),s("ul",[s("li",[t._v("Nginx 同 redis 类似都采用了 io 多路复用机制，每个 worker 都是一个独立的进程，但每个进程里只有一个主线程，通过异步非阻塞的方式来处理请求， 即使是千上万个请求也不在话下。每个 worker 的线程可以把一个 cpu 的性能发挥到极致。")]),t._v(" "),s("li",[t._v("所以 worker 数和服务器的cpu数相等是最为适宜的。设少了会浪费 cpu，设多了会造成 cpu 频繁切换上下文带来的损耗。")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#设置 worker 数量。")]),t._v("\nworker_processes "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#work 绑定 cpu(4 work 绑定 4cpu)。")]),t._v("\nworker_cpu_affinity 0001 0010 0100 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#work 绑定 cpu (4 work 绑定 8cpu 中的 4 个) 。")]),t._v("\nworker_cpu_affinity 0000001 00000010 00000100 00001000\n")])])]),s("h3",{attrs:{id:"_7-4-连接数-worker-connection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-连接数-worker-connection"}},[t._v("#")]),t._v(" 7.4 连接数 worker_connection")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("发送请求，占用了worker的几个连接数？2个或者4个")]),t._v(" "),s("ul",[s("li",[t._v("2个：如果请求的是静态资源，nginx把请求指向静态资源服务器，直接将请求返回了，这样就占用了2个")]),t._v(" "),s("li",[t._v("4个：如果nginx要访问tomcat，查询数据库，那么就需要占用4个连接数")])])]),t._v(" "),s("li",[s("p",[t._v("nginx有一个master，有四个worker，每个worker支持最大的连接数是1024，支持的最大并发数（work能承受多少个请求）是多少？")]),t._v(" "),s("ul",[s("li",[t._v("work最大支持的连接数 4*1024，那么每个work最大的并发数就是 "),s("code",[t._v("(4*1024)/2")]),t._v("或者"),s("code",[t._v("(4*1024)/4")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("连接数")]),t._v("是表示每个 worker 进程所能建立连接的最大值，所以，一个 nginx 能建立的最大连接数，应该是 "),s("code",[t._v("worker_connections * worker_processes")]),t._v("。当然，这里说的是最大连接数，对于HTTP请求本地资源来说，能够支持的最大并发数量是worker_connections * worker_processes")])]),t._v(" "),s("li",[s("p",[t._v("如果是支持 "),s("code",[t._v("http1.1")]),t._v(" 的浏览器每次访问要占两个连接，所以普通的静态访问最大并发数是："),s("code",[t._v("worker_connections * worker_processes /2")]),t._v("，")])]),t._v(" "),s("li",[s("p",[t._v("如果是 HTTP 作 为反向代理来说，最大并发数量应该是"),s("code",[t._v("worker_connections * worker_processes/4")]),t._v("。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接。")])])]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV1zJ411w7SV",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx教程由浅入深"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.jianshu.com/p/630e2e1ca57f",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx从听说到学会"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);